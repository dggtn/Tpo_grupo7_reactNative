import * as LocalAuthentication from 'expo-local-authentication';

/**
 * ‚úÖ VERIFICACI√ìN MEJORADA: Detecta biometr√≠a O PIN/Pattern
 */
export const isBiometricAvailable = async () => {
  try {
    const hardware = await LocalAuthentication.hasHardwareAsync();
    const enrolled = await LocalAuthentication.isEnrolledAsync();
    const types = await LocalAuthentication.supportedAuthenticationTypesAsync();
    
    console.log('[BiometricUtils] üîç Verificaci√≥n:');
    console.log('  - Hardware disponible:', hardware);
    console.log('  - Biometr√≠a enrolled:', enrolled);
    console.log('  - Tipos soportados:', types);
    
    // ‚úÖ L√ìGICA MEJORADA:
    // 1. Si enrolled = true ‚Üí Biometr√≠a real configurada
    // 2. Si enrolled = false pero hardware = true y types > 0 ‚Üí PIN/Pattern disponible
    let available = false;
    
    if (hardware) {
      if (enrolled) {
        console.log('  - ‚úÖ Biometr√≠a real configurada');
        available = true;
      } else if (types.length > 0) {
        console.log('  - ‚úÖ PIN/Pattern disponible (sin biometr√≠a enrolled)');
        available = true;
      } else {
        console.log('  - ‚ùå Sin autenticaci√≥n configurada');
        available = false;
      }
    } else {
      console.log('  - ‚ùå Sin hardware de seguridad');
      available = false;
    }
    
    console.log('  - üéØ Resultado final:', available);
    return available;
    
  } catch (error) {
    console.error('[BiometricUtils] ‚ùå Error verificando disponibilidad:', error);
    return false;
  }
};

/**
 * Autentica con biometr√≠a O PIN del dispositivo
 */
export const authenticate = async (promptMessage = 'Autenticaci√≥n requerida') => {
  try {
    console.log('[BiometricUtils] üîê Iniciando autenticaci√≥n:', promptMessage);
    
    // ‚úÖ CONFIGURACI√ìN CORRECTA PARA ACEPTAR PIN/Pattern
    const result = await LocalAuthentication.authenticateAsync({
      promptMessage,
      cancelLabel: 'Cancelar',
      disableDeviceFallback: false, // ‚úÖ CR√çTICO: Permitir PIN/patr√≥n
      fallbackLabel: 'Usar PIN', // Texto del bot√≥n fallback
    });
    
    console.log('[BiometricUtils] üìä Resultado:', {
      success: result.success,
      error: result.error,
      warning: result.warning
    });
    
    return result;
    
  } catch (error) {
    console.error('[BiometricUtils] ‚ùå Error de autenticaci√≥n:', error);
    return { 
      success: false, 
      error: error.message,
      errorCode: error.code 
    };
  }
};

/**
 * ‚úÖ MEJORADO: Obtiene nombre del tipo de autenticaci√≥n con detecci√≥n de PIN
 */
export const getBiometricTypeName = async () => {
  try {
    const types = await LocalAuthentication.supportedAuthenticationTypesAsync();
    const enrolled = await LocalAuthentication.isEnrolledAsync();
    
    console.log('[BiometricUtils] üì± Tipos soportados:', types);
    console.log('[BiometricUtils] üì± Enrolled:', enrolled);
    
    // Verificar tipos espec√≠ficos de biometr√≠a
    if (types.includes(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION)) {
      return 'Face ID';
    }
    
    if (types.includes(LocalAuthentication.AuthenticationType.FINGERPRINT)) {
      if (enrolled) {
        return 'Huella Digital';
      } else {
        // Tiene hardware de huella pero no est√° configurada ‚Üí debe ser PIN/Pattern
        return 'PIN del Dispositivo';
      }
    }
    
    if (types.includes(LocalAuthentication.AuthenticationType.IRIS)) {
      return 'Reconocimiento de Iris';
    }
    
    // Si tiene hardware pero no biometr√≠a enrolled ‚Üí es PIN/Pattern
    const hasHardware = await LocalAuthentication.hasHardwareAsync();
    if (hasHardware && !enrolled && types.length > 0) {
      return 'PIN del Dispositivo';
    }
    
    return 'Autenticaci√≥n del Dispositivo';
    
  } catch (error) {
    console.error('[BiometricUtils] ‚ùå Error obteniendo tipo:', error);
    return 'Autenticaci√≥n del Dispositivo';
  }
};

/**
 * ‚úÖ MEJORADO: Obtiene informaci√≥n completa con detecci√≥n de PIN
 */
export const getBiometricInfo = async () => {
  try {
    const hardware = await LocalAuthentication.hasHardwareAsync();
    const enrolled = await LocalAuthentication.isEnrolledAsync();
    const types = await LocalAuthentication.supportedAuthenticationTypesAsync();
    const typeName = await getBiometricTypeName();
    
    // Determinar disponibilidad real
    let available = false;
    if (hardware) {
      available = enrolled || types.length > 0;
    }
    
    const hasBiometricData = enrolled; // Solo true si hay biometr√≠a real
    const hasOnlyPIN = !enrolled && types.length > 0; // PIN sin biometr√≠a
    
    const info = {
      hardware,
      enrolled,
      types,
      available,
      typeName,
      hasBiometricData,
      hasOnlyPIN,
    };
    
    console.log('[BiometricUtils] üìã Info completa:', JSON.stringify(info, null, 2));
    return info;
    
  } catch (error) {
    console.error('[BiometricUtils] ‚ùå Error obteniendo info:', error);
    return {
      hardware: false,
      enrolled: false,
      types: [],
      available: false,
      typeName: 'No disponible',
      hasBiometricData: false,
      hasOnlyPIN: false,
    };
  }
};

/**
 * ‚úÖ MEJORADO: Verifica si el dispositivo tiene seguridad configurada (biometr√≠a O PIN)
 */
export const hasDeviceSecurity = async () => {
  try {
    const hardware = await LocalAuthentication.hasHardwareAsync();
    const enrolled = await LocalAuthentication.isEnrolledAsync();
    const types = await LocalAuthentication.supportedAuthenticationTypesAsync();
    
    // Tiene seguridad si:
    // 1. Est√° enrolled (biometr√≠a real), O
    // 2. Tiene hardware y tipos soportados (PIN/Pattern)
    const hasSecurity = enrolled || (hardware && types.length > 0);
    
    console.log('[BiometricUtils] üîí Seguridad del dispositivo:', hasSecurity);
    return hasSecurity;
  } catch (error) {
    console.error('[BiometricUtils] ‚ùå Error verificando seguridad:', error);
    return false;
  }
};

/**
 * ‚úÖ NUEVO: Prueba si la autenticaci√≥n realmente funciona (versi√≥n ligera)
 */
export const canAuthenticate = async () => {
  try {
    const hardware = await LocalAuthentication.hasHardwareAsync();
    if (!hardware) return false;
    
    const types = await LocalAuthentication.supportedAuthenticationTypesAsync();
    if (types.length === 0) return false;
    
    // Si lleg√≥ aqu√≠, hay hardware y tipos ‚Üí puede autenticar
    return true;
  } catch (error) {
    console.error('[BiometricUtils] ‚ùå Error verificando capacidad:', error);
    return false;
  }
};
